@page "/filestowages"
@using StowageApp.Shared.Entities
@using System.Net.Http.Json
@inject HttpClient http
@inject MyStorageBase storageService
@inject NavigationManager _navigationManager


<h2>FileStowages</h2>

<form @onsubmit="OnSubmit">
    <InputFile class="form-control" OnChange="OnInputFileChange" />
    @Message
    <br/>
    <button class="btn btn-success" type="submit">Enviar</button>
</form>

<br />

@if(fileStowages == null)
{
    <p>Carregando...</p>
}
else if(fileStowages.Length == 0)
{
    <p>Não existem arquivos cadastrados</p>
}
else
{
    <table class="table">
        <tr>
            <th>FileName</th>
            <th>FileSize</th>
            <th>RemotePath</th>
            <th>UploadDate</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
        @foreach (var filestowage in fileStowages)
        {
            <tbody>
                <tr>
                    <td>@filestowage.FileName</td>
                    <td>@filestowage.FileSize</td>
                    <td>@filestowage.RemotePath</td>
                    <td>@filestowage.UploadDate</td>
                    <td>
                        <button class="btn btn-primary"><a @onclick="() => NavigateToEditPage(filestowage.ID)"> Edit</a></button>
                    </td>
                    <td>
                        <button class="btn btn-danger"><a @onclick="@(async() => await DeleteFile(filestowage.ID))"> Delete</a></button>
                    </td>
                </tr>
            </tbody>
        }
    </table>
}

@code {

    FileStowage[]? fileStowages { get; set; }
    string Message = "Sem arquivo selecionado";
    IReadOnlyList<IBrowserFile>? selectedFiles;

    protected override async Task OnInitializedAsync()
    {
        await LoadFilesStowage();
    }

    async Task LoadFilesStowage() => fileStowages = await http.GetFromJsonAsync<FileStowage[]>("/api/filestowage");

    private void NavigateToEditPage(Guid id)
    {
        var editPageUri = $"filestowages/Edit/{id}";
        _navigationManager.NavigateTo(editPageUri);
    }

    async Task DeleteFile(Guid id)
    {
        await http.DeleteFromJsonAsync<FileStowage>($"/api/filestowage/{id}");
        await LoadFilesStowage();
    }

    void OnInputFileChange(InputFileChangeEventArgs args)
    {
        selectedFiles = args.GetMultipleFiles();
        Message = $"{selectedFiles.Count} arquivos selecionados";
        StateHasChanged();
    }

    async Task OnSubmit()
    {
        if (selectedFiles == null || selectedFiles.Count == 0)
            return;
        
        byte[] bytes;

        foreach (var file in selectedFiles)
        {
            using (Stream stream = file.OpenReadStream())
            {
                using (MemoryStream memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    bytes = memoryStream.ToArray();
                }
            }
            var form = new MultipartFormDataContent();
            form.Add(new ByteArrayContent(bytes, 0, bytes.Length), "File", file.Name);
            var response = await http.PostAsync("/api/filestowage",form);
            response.EnsureSuccessStatusCode();
        }

        Message = $" O arquivo foi salvo com sucesso!";
        await LoadFilesStowage();
    }
}


